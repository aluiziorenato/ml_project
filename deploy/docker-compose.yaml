version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: ml_project_db
    environment:
      POSTGRES_DB: ml_project
      POSTGRES_USER: ml_user
      POSTGRES_PASSWORD: ml_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - ml_network
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: ml_project_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - ml_network
    restart: unless-stopped

  # ML Project Backend
  backend:
    build:
      context: ..
      dockerfile: deploy/Dockerfile
      target: production
    container_name: ml_project_backend
    environment:
      - DATABASE_URL=postgresql://ml_user:ml_password@postgres:5432/ml_project
      - REDIS_URL=redis://redis:6379
      - SECRET_KEY=your-secret-key-change-in-production
      - ML_CLIENT_ID=your-ml-client-id
      - ML_CLIENT_SECRET=your-ml-client-secret
      - MLFLOW_TRACKING_URI=file:///app/mlruns
    ports:
      - "8000:8000"
    volumes:
      - ./config:/app/config
      - automl_results:/app/automl_results
      - mlflow_data:/app/mlruns
    depends_on:
      - postgres
      - redis
    networks:
      - ml_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MLflow Tracking Server
  mlflow:
    image: python:3.11-slim
    container_name: ml_project_mlflow
    command: >
      bash -c "
        pip install mlflow[extras] psycopg2-binary &&
        mlflow server 
          --backend-store-uri postgresql://ml_user:ml_password@postgres:5432/ml_project
          --default-artifact-root /mlflow/artifacts
          --host 0.0.0.0
          --port 5000
      "
    ports:
      - "5000:5000"
    volumes:
      - mlflow_artifacts:/mlflow/artifacts
    depends_on:
      - postgres
    networks:
      - ml_network
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: ml_project_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - backend
      - mlflow
    networks:
      - ml_network
    restart: unless-stopped

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: ml_project_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - ml_network
    restart: unless-stopped

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: ml_project_grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - ml_network
    restart: unless-stopped

  # Jupyter Notebook Server (for examples)
  jupyter:
    build:
      context: ..
      dockerfile: deploy/Dockerfile
      target: development
    container_name: ml_project_jupyter
    command: >
      bash -c "
        pip install jupyter notebook &&
        jupyter notebook --ip=0.0.0.0 --port=8888 --no-browser --allow-root
          --NotebookApp.token='' --NotebookApp.password=''
      "
    ports:
      - "8888:8888"
    volumes:
      - ../examples:/app/examples
      - ../automl:/app/automl
      - automl_results:/app/automl_results
    environment:
      - JUPYTER_ENABLE_LAB=yes
    networks:
      - ml_network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  automl_results:
  mlflow_data:
  mlflow_artifacts:
  prometheus_data:
  grafana_data:

networks:
  ml_network:
    driver: bridge