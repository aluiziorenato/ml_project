services:
  # Database Services
  db:
    image: postgres:15
    restart: unless-stopped
    environment:
      POSTGRES_USER: usuario
      POSTGRES_PASSWORD: senha
      POSTGRES_DB: nome_do_banco
    volumes:
      - pgdata:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - ml_network

  pgadmin:
    image: dpage/pgadmin4
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - "8080:80"
    depends_on:
      - db
    networks:
      - ml_network

  # Cache & Message Queue
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - ml_network

  # Core Services
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    restart: unless-stopped
    env_file:
      - ./backend/.env
    environment:
      DATABASE_URL: postgresql://usuario:senha@db:5432/nome_do_banco
      REDIS_URL: redis://redis:6379/0
    ports:
      - "8000:8000"
    depends_on:
      - db
      - redis
    networks:
      - ml_network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    restart: unless-stopped
    environment:
      VITE_BACKEND_URL: http://localhost:8000
    ports:
      - "3000:80"
    depends_on:
      - backend
    networks:
      - ml_network

  # Existing ML Services
  simulator_service:
    build:
      context: ./simulator_service
      dockerfile: Dockerfile
    restart: unless-stopped
    environment:
      DATABASE_URL: postgresql://usuario:senha@db:5432/nome_do_banco
      REDIS_URL: redis://redis:6379/1
    ports:
      - "8001:8001"
    depends_on:
      - db
      - redis
    networks:
      - ml_network

  learning_service:
    build:
      context: ./learning_service
      dockerfile: Dockerfile
    restart: unless-stopped
    environment:
      DATABASE_URL: postgresql://usuario:senha@db:5432/nome_do_banco
      REDIS_URL: redis://redis:6379/2
    ports:
      - "8002:8002"
    depends_on:
      - db
      - redis
    networks:
      - ml_network

  optimizer_ai:
    build:
      context: ./optimizer_ai
      dockerfile: Dockerfile
    restart: unless-stopped
    environment:
      DATABASE_URL: postgresql://usuario:senha@db:5432/nome_do_banco
      REDIS_URL: redis://redis:6379/3
    ports:
      - "8003:8003"
    depends_on:
      - db
      - redis
    networks:
      - ml_network

  # SEO Intelligence Modules
  ai_predictive:
    build:
      context: ./modules/ai_predictive
      dockerfile: Dockerfile
    restart: unless-stopped
    environment:
      DATABASE_URL: postgresql://usuario:senha@db:5432/nome_do_banco
      REDIS_URL: redis://redis:6379/4
    ports:
      - "8004:8004"
    depends_on:
      - db
      - redis
    networks:
      - ml_network

  dynamic_optimization:
    build:
      context: ./modules/dynamic_optimization
      dockerfile: Dockerfile
    restart: unless-stopped
    environment:
      DATABASE_URL: postgresql://usuario:senha@db:5432/nome_do_banco
      REDIS_URL: redis://redis:6379/5
    ports:
      - "8005:8005"
    depends_on:
      - db
      - redis
    networks:
      - ml_network

  competitor_intelligence:
    build:
      context: ./modules/competitor_intelligence
      dockerfile: Dockerfile
    restart: unless-stopped
    environment:
      DATABASE_URL: postgresql://usuario:senha@db:5432/nome_do_banco
      REDIS_URL: redis://redis:6379/6
    ports:
      - "8006:8006"
    depends_on:
      - db
      - redis
    networks:
      - ml_network

  cross_platform:
    build:
      context: ./modules/cross_platform
      dockerfile: Dockerfile
    restart: unless-stopped
    environment:
      DATABASE_URL: postgresql://usuario:senha@db:5432/nome_do_banco
      REDIS_URL: redis://redis:6379/7
    ports:
      - "8007:8007"
    depends_on:
      - db
      - redis
    networks:
      - ml_network

  semantic_intent:
    build:
      context: ./modules/semantic_intent
      dockerfile: Dockerfile
    restart: unless-stopped
    environment:
      DATABASE_URL: postgresql://usuario:senha@db:5432/nome_do_banco
      REDIS_URL: redis://redis:6379/8
    ports:
      - "8008:8008"
    depends_on:
      - db
      - redis
    networks:
      - ml_network

  trend_detector:
    build:
      context: ./modules/trend_detector
      dockerfile: Dockerfile
    restart: unless-stopped
    environment:
      DATABASE_URL: postgresql://usuario:senha@db:5432/nome_do_banco
      REDIS_URL: redis://redis:6379/9
    ports:
      - "8009:8009"
    depends_on:
      - db
      - redis
    networks:
      - ml_network

  market_pulse:
    build:
      context: ./modules/market_pulse
      dockerfile: Dockerfile
    restart: unless-stopped
    environment:
      DATABASE_URL: postgresql://usuario:senha@db:5432/nome_do_banco
      REDIS_URL: redis://redis:6379/10
    ports:
      - "8010:8010"
    depends_on:
      - db
      - redis
    networks:
      - ml_network

  visual_seo:
    build:
      context: ./modules/visual_seo
      dockerfile: Dockerfile
    restart: unless-stopped
    environment:
      DATABASE_URL: postgresql://usuario:senha@db:5432/nome_do_banco
      REDIS_URL: redis://redis:6379/11
    ports:
      - "8011:8011"
    depends_on:
      - db
      - redis
    networks:
      - ml_network

  chatbot_assistant:
    build:
      context: ./modules/chatbot_assistant
      dockerfile: Dockerfile
    restart: unless-stopped
    environment:
      DATABASE_URL: postgresql://usuario:senha@db:5432/nome_do_banco
      REDIS_URL: redis://redis:6379/12
    ports:
      - "8012:8012"
    depends_on:
      - db
      - redis
    networks:
      - ml_network

  roi_prediction:
    build:
      context: ./modules/roi_prediction
      dockerfile: Dockerfile
    restart: unless-stopped
    environment:
      DATABASE_URL: postgresql://usuario:senha@db:5432/nome_do_banco
      REDIS_URL: redis://redis:6379/13
    ports:
      - "8013:8013"
    depends_on:
      - db
      - redis
    networks:
      - ml_network

  # Campaign Automation Service
  campaign_automation_service:
    build:
      context: ./campaign_automation_service
      dockerfile: Dockerfile
    restart: unless-stopped
    environment:
      DATABASE_URL: postgresql://usuario:senha@db:5432/nome_do_banco
      REDIS_URL: redis://redis:6379/14
      SIMULATOR_SERVICE_URL: http://simulator_service:8001
      OPTIMIZER_AI_URL: http://optimizer_ai:8003
      LEARNING_SERVICE_URL: http://learning_service:8002
      CELERY_BROKER_URL: redis://redis:6379/14
      CELERY_RESULT_BACKEND: redis://redis:6379/14
      SECRET_KEY: campaign-automation-secret-key-change-in-production
    ports:
      - "8014:8014"
    depends_on:
      - db
      - redis
    networks:
      - ml_network

  # ACOS (Advertising Cost of Sales) Service
  acos_service:
    build:
      context: ./acos_service
      dockerfile: Dockerfile
    restart: unless-stopped
    environment:
      DATABASE_URL: postgresql://usuario:senha@db:5432/nome_do_banco
      REDIS_URL: redis://redis:6379/15
      CAMPAIGN_SERVICE_URL: http://campaign_automation_service:8014
      AI_SERVICE_URL: http://ai_predictive:8005
      JWT_SECRET_KEY: acos-service-secret-key-change-in-production
    ports:
      - "8016:8016"
    depends_on:
      - db
      - redis
      - campaign_automation_service
    networks:
      - ml_network

  # Discount Campaign Scheduler Service
  discount_campaign_scheduler:
    build:
      context: ./discount_campaign_scheduler
      dockerfile: Dockerfile
    restart: unless-stopped
    environment:
      DATABASE_URL: postgresql://usuario:senha@db:5432/nome_do_banco
      REDIS_URL: redis://redis:6379/15
      CELERY_BROKER_URL: redis://redis:6379/15
      CELERY_RESULT_BACKEND: redis://redis:6379/15
      BACKEND_URL: http://backend:8000
      ML_API_URL: https://api.mercadolibre.com
      ML_CLIENT_ID: ${ML_CLIENT_ID:-}
      ML_CLIENT_SECRET: ${ML_CLIENT_SECRET:-}
      SECRET_KEY: discount-campaign-scheduler-secret-key-change-in-production
      SCHEDULE_CHECK_INTERVAL_MINUTES: 5
      METRICS_COLLECTION_INTERVAL_HOURS: 1
    ports:
      - "8015:8015"
    depends_on:
      - db
      - redis
      - backend
    networks:
      - ml_network

  # Celery Worker for Discount Campaign Scheduler
  discount_scheduler_worker:
    build:
      context: ./discount_campaign_scheduler
      dockerfile: Dockerfile
    restart: unless-stopped
    command: celery -A app.tasks worker --loglevel=info
    environment:
      DATABASE_URL: postgresql://usuario:senha@db:5432/nome_do_banco
      REDIS_URL: redis://redis:6379/15
      CELERY_BROKER_URL: redis://redis:6379/15
      CELERY_RESULT_BACKEND: redis://redis:6379/15
      BACKEND_URL: http://backend:8000
      ML_API_URL: https://api.mercadolibre.com
      ML_CLIENT_ID: ${ML_CLIENT_ID:-}
      ML_CLIENT_SECRET: ${ML_CLIENT_SECRET:-}
      SECRET_KEY: discount-campaign-scheduler-secret-key-change-in-production
    depends_on:
      - db
      - redis
      - discount_campaign_scheduler
    networks:
      - ml_network

  # Celery Beat for Discount Campaign Scheduler
  discount_scheduler_beat:
    build:
      context: ./discount_campaign_scheduler
      dockerfile: Dockerfile
    restart: unless-stopped
    command: celery -A app.tasks beat --loglevel=info
    environment:
      DATABASE_URL: postgresql://usuario:senha@db:5432/nome_do_banco
      REDIS_URL: redis://redis:6379/15
      CELERY_BROKER_URL: redis://redis:6379/15
      CELERY_RESULT_BACKEND: redis://redis:6379/15
      BACKEND_URL: http://backend:8000
      ML_API_URL: https://api.mercadolibre.com
      ML_CLIENT_ID: ${ML_CLIENT_ID:-}
      ML_CLIENT_SECRET: ${ML_CLIENT_SECRET:-}
      SECRET_KEY: discount-campaign-scheduler-secret-key-change-in-production
    depends_on:
      - db
      - redis
      - discount_campaign_scheduler
    networks:
      - ml_network

  # Strategic Mode Service
  strategic_mode_service:
    build:
      context: ./strategic_mode_service
      dockerfile: Dockerfile
    restart: unless-stopped
    environment:
      DATABASE_URL: postgresql://usuario:senha@db:5432/nome_do_banco
      REDIS_URL: redis://redis:6379/16
      ACOS_SERVICE_URL: http://acos_service:8016
      CAMPAIGN_SERVICE_URL: http://campaign_automation_service:8014
      DISCOUNT_SERVICE_URL: http://discount_campaign_scheduler:8015
      AI_PREDICTIVE_URL: http://ai_predictive:8005
      ROI_PREDICTION_URL: http://roi_prediction:8013
      SECRET_KEY: strategic-mode-secret-key-change-in-production
      CELERY_BROKER_URL: redis://redis:6379/16
      CELERY_RESULT_BACKEND: redis://redis:6379/16
    ports:
      - "8017:8017"
    depends_on:
      - db
      - redis
      - acos_service
      - campaign_automation_service
      - discount_campaign_scheduler
    networks:
      - ml_network

  # Gamification Service
  gamification_service:
    build:
      context: ./gamification_service
      dockerfile: Dockerfile
    restart: unless-stopped
    environment:
      DATABASE_URL: postgresql://usuario:senha@db:5432/nome_do_banco
      REDIS_URL: redis://redis:6379/17
      SECRET_KEY: gamification-service-secret-key-change-in-production
    ports:
      - "8018:8018"
    depends_on:
      - db
      - redis
    networks:
      - ml_network

  # Alerts Service
  alerts_service:
    build:
      context: ./alerts_service
      dockerfile: Dockerfile
    restart: unless-stopped
    environment:
      DATABASE_URL: postgresql://usuario:senha@db:5432/nome_do_banco
      REDIS_URL: redis://redis:6379/18
      SECRET_KEY: alerts-service-secret-key-change-in-production
      SMTP_SERVER: ${SMTP_SERVER:-smtp.gmail.com}
      SMTP_PORT: ${SMTP_PORT:-587}
      SMTP_USER: ${SMTP_USER:-}
      SMTP_PASSWORD: ${SMTP_PASSWORD:-}
      FRONTEND_URL: http://frontend:80
    ports:
      - "8019:8019"
    depends_on:
      - db
      - redis
    networks:
      - ml_network

  # Celery Workers for async processing
  celery_worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    restart: unless-stopped
    command: celery -A app.celery_app worker --loglevel=info
    environment:
      DATABASE_URL: postgresql://usuario:senha@db:5432/nome_do_banco
      REDIS_URL: redis://redis:6379/0
    depends_on:
      - db
      - redis
    networks:
      - ml_network

  # Celery Beat for scheduled tasks
  celery_beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    restart: unless-stopped
    command: celery -A app.celery_app beat --loglevel=info
    environment:
      DATABASE_URL: postgresql://usuario:senha@db:5432/nome_do_banco
      REDIS_URL: redis://redis:6379/0
    depends_on:
      - db
      - redis
    networks:
      - ml_network

networks:
  ml_network:
    driver: bridge

volumes:
  pgdata:
  redis_data:
