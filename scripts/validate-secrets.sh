#!/bin/bash

# üîê CI/CD Secrets Validation Script
# Este script valida se todos os secrets necess√°rios est√£o configurados
# e fornece orienta√ß√µes sobre seguran√ßa de logs e gerenciamento de secrets

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

print_header() {
    echo -e "${BLUE}üîê Valida√ß√£o de Secrets do CI/CD${NC}"
    echo "========================================="
    echo ""
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

print_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

print_security_note() {
    echo -e "${YELLOW}üõ°Ô∏è SEGURAN√áA: $1${NC}"
}

check_secret() {
    local secret_name=$1
    local required=$2
    local description=$3
    
    # Check if running in GitHub Actions
    if [ -n "$GITHUB_ACTIONS" ]; then
        # In GitHub Actions, we can only check if the secret is not empty
        if [ -n "${!secret_name}" ]; then
            print_success "$secret_name configurado ($description)"
            return 0
        else
            if [ "$required" = "true" ]; then
                print_error "$secret_name n√£o est√° configurado ($description)"
                return 1
            else
                print_warning "$secret_name n√£o est√° configurado ($description) - OPCIONAL"
                return 0
            fi
        fi
    else
        # Running locally - provide instructions
        print_info "Para verificar $secret_name localmente, configure como vari√°vel de ambiente"
        echo "  export $secret_name=<seu_valor_secreto>"
        return 0
    fi
}

validate_secrets() {
    echo "üîç Validando secrets obrigat√≥rios..."
    echo ""
    
    local all_valid=true
    
    # Required secrets
    check_secret "SECRET_KEY" "true" "Chave secreta da aplica√ß√£o" || all_valid=false
    check_secret "ML_CLIENT_ID" "true" "Client ID da API do Mercado Livre" || all_valid=false
    check_secret "ML_CLIENT_SECRET" "true" "Secret da API do Mercado Livre" || all_valid=false
    check_secret "DOCKER_USERNAME" "true" "Usu√°rio do Docker Hub" || all_valid=false
    check_secret "DOCKER_PASSWORD" "true" "Senha do Docker Hub" || all_valid=false
    check_secret "DEPLOY_TOKEN" "true" "Token de autoriza√ß√£o para deployment" || all_valid=false
    check_secret "PROD_API_KEY" "true" "Chave da API de produ√ß√£o" || all_valid=false
    
    echo ""
    echo "üîç Validando secrets opcionais..."
    echo ""
    
    # Optional secrets
    check_secret "SLACK_WEBHOOK_URL" "false" "URL do webhook do Slack"
    check_secret "TEAMS_WEBHOOK_URL" "false" "URL do webhook do Teams"
    check_secret "NOTIFICATION_EMAIL" "false" "Email para notifica√ß√µes"
    check_secret "SENTRY_DSN" "false" "URL do Sentry para monitoramento"
    check_secret "STAGING_URL" "false" "URL do ambiente de staging"
    check_secret "PRODUCTION_URL" "false" "URL do ambiente de produ√ß√£o"
    
    return $([ "$all_valid" = "true" ])
}

print_security_guidelines() {
    echo ""
    echo "üõ°Ô∏è DIRETRIZES DE SEGURAN√áA PARA CI/CD"
    echo "======================================"
    echo ""
    
    print_security_note "LOGS E EXPOSI√á√ÉO DE SECRETS:"
    echo "  ‚Ä¢ GitHub Actions automaticamente mascara secrets nos logs"
    echo "  ‚Ä¢ NUNCA fa√ßa echo/print direto de valores de secrets"
    echo "  ‚Ä¢ Use \${{ secrets.SECRET_NAME }} apenas em contextos seguros"
    echo "  ‚Ä¢ Logs podem ser visualizados por colaboradores do reposit√≥rio"
    echo ""
    
    print_security_note "CONFIGURA√á√ÉO DE SECRETS:"
    echo "  ‚Ä¢ Acesse: Reposit√≥rio > Settings > Secrets and variables > Actions"
    echo "  ‚Ä¢ Use secrets espec√≠ficos por ambiente (staging/production)"
    echo "  ‚Ä¢ Implemente rota√ß√£o regular de secrets sens√≠veis"
    echo "  ‚Ä¢ Monitore uso e acesso aos secrets"
    echo ""
    
    print_security_note "MELHORES PR√ÅTICAS:"
    echo "  ‚Ä¢ Use o princ√≠pio do menor privil√©gio"
    echo "  ‚Ä¢ Implemente aprova√ß√£o manual para deploys de produ√ß√£o"
    echo "  ‚Ä¢ Configure alertas para falhas de autentica√ß√£o"
    echo "  ‚Ä¢ Mantenha backup seguro de secrets cr√≠ticos"
    echo "  ‚Ä¢ Documente purpose e owner de cada secret"
    echo ""
    
    print_security_note "MONITORAMENTO E AUDITORIA:"
    echo "  ‚Ä¢ Monitore logs de deploy para comportamentos an√¥malos"
    echo "  ‚Ä¢ Configure alertas para falhas de autentica√ß√£o"
    echo "  ‚Ä¢ Implemente logging de auditoria para opera√ß√µes cr√≠ticas"
    echo "  ‚Ä¢ Revise regularmente permissions e access logs"
    echo ""
}

print_configuration_guide() {
    echo ""
    echo "üìã GUIA DE CONFIGURA√á√ÉO DE SECRETS"
    echo "=================================="
    echo ""
    
    echo "1. SECRETS OBRIGAT√ìRIOS:"
    echo ""
    echo "gh secret set SECRET_KEY --body \"sua-chave-secreta-complexa\""
    echo "gh secret set ML_CLIENT_ID --body \"seu-client-id-mercado-livre\""
    echo "gh secret set ML_CLIENT_SECRET --body \"seu-client-secret-mercado-livre\""
    echo "gh secret set DOCKER_USERNAME --body \"seu-usuario-docker\""
    echo "gh secret set DOCKER_PASSWORD --body \"sua-senha-docker\""
    echo "gh secret set DEPLOY_TOKEN --body \"token-autorizacao-deploy-min-20-chars\""
    echo "gh secret set PROD_API_KEY --body \"chave-api-producao-min-32-chars\""
    echo ""
    
    echo "2. SECRETS OPCIONAIS:"
    echo ""
    echo "gh secret set SLACK_WEBHOOK_URL --body \"https://hooks.slack.com/services/...\""
    echo "gh secret set TEAMS_WEBHOOK_URL --body \"https://outlook.office.com/webhook/...\""
    echo "gh secret set NOTIFICATION_EMAIL --body \"alerts@sua-empresa.com\""
    echo "gh secret set SENTRY_DSN --body \"https://abc123@sentry.io/123456\""
    echo "gh secret set STAGING_URL --body \"https://staging.sua-app.com\""
    echo "gh secret set PRODUCTION_URL --body \"https://producao.sua-app.com\""
    echo ""
}

print_testing_guide() {
    echo ""
    echo "üß™ TESTANDO O PIPELINE COM SECRETS"
    echo "=================================="
    echo ""
    
    echo "1. CRIAR PR DE TESTE:"
    echo "   git checkout -b test-ci-cd-secrets"
    echo "   git commit --allow-empty -m \"test: Validar pipeline CI/CD com secrets\""
    echo "   git push origin test-ci-cd-secrets"
    echo "   gh pr create --title \"Test: CI/CD Pipeline com Secrets\" --body \"Validando integra√ß√£o segura de secrets\""
    echo ""
    
    echo "2. MONITORAR EXECU√á√ÉO:"
    echo "   ‚Ä¢ GitHub Actions: $(git config --get remote.origin.url | sed 's/\.git$//')/actions"
    echo "   ‚Ä¢ Security Tab: $(git config --get remote.origin.url | sed 's/\.git$//')/security"
    echo "   ‚Ä¢ Verificar logs sem exposi√ß√£o de valores sens√≠veis"
    echo ""
    
    echo "3. VALIDAR SEGURAN√áA:"
    echo "   ‚Ä¢ Confirmar que secrets n√£o aparecem nos logs"
    echo "   ‚Ä¢ Verificar que deploy foi autorizado corretamente"
    echo "   ‚Ä¢ Testar mecanismos de rollback em caso de falha"
    echo ""
}

# Main execution
main() {
    print_header
    
    if validate_secrets; then
        print_success "Todos os secrets obrigat√≥rios est√£o configurados!"
        echo ""
        print_info "Pipeline est√° pronto para execu√ß√£o segura"
    else
        print_error "Alguns secrets obrigat√≥rios n√£o est√£o configurados"
        echo ""
        print_warning "Configure os secrets ausentes antes de executar o pipeline"
    fi
    
    print_security_guidelines
    print_configuration_guide
    print_testing_guide
    
    echo ""
    print_info "Para mais informa√ß√µes, consulte: docs/ci-cd-workflow-documentation.md"
    echo ""
}

# Execute main function
main "$@"