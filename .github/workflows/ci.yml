name: ML Project CI/CD

on: 
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  PYTHON_VERSION: '3.11'

jobs:
  # Lint and Code Quality
  lint:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        component: [backend, automl]
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.component }}-${{ hashFiles(format('{0}/requirements*.txt', matrix.component)) }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort
          if [ -f ${{ matrix.component }}/requirements.txt ]; then
            pip install -r ${{ matrix.component }}/requirements.txt
          fi
          
      - name: Lint with flake8
        run: |
          flake8 ${{ matrix.component }}/ --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 ${{ matrix.component }}/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
          
      - name: Check code formatting with black
        run: black --check ${{ matrix.component }}/
        
      - name: Check import sorting with isort
        run: isort --check-only ${{ matrix.component }}/

  # Test Suite
  test:
    runs-on: ubuntu-latest
    needs: lint
    strategy:
      matrix:
        test-type: [unit, integration, automl]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-test-${{ hashFiles('**/requirements*.txt') }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov pytest-asyncio
          pip install -r backend/requirements.txt
          pip install -r automl/requirements.txt
          
      - name: Run unit tests
        if: matrix.test-type == 'unit'
        run: |
          pytest tests/ -v --cov=backend --cov=automl --cov-report=xml --cov-report=term
          
      - name: Run integration tests
        if: matrix.test-type == 'integration'
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        run: |
          pytest tests/test_integration.py tests/test_complete_integration.py -v
          
      - name: Run AutoML regression tests
        if: matrix.test-type == 'automl'
        run: |
          pytest tests/test_experiment.py -v --cov=automl --cov-report=xml
          
      - name: Upload coverage to Codecov
        if: matrix.test-type == 'unit' || matrix.test-type == 'automl'
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: ${{ matrix.test-type }}
          name: ${{ matrix.test-type }}-coverage

  # Security Scanning
  security:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Build and Push Docker Images
  build:
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.event_name == 'push'
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Login to Docker Hub
        if: github.ref == 'refs/heads/main'
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          
      - name: Build and push production image
        if: github.ref == 'refs/heads/main'
        uses: docker/build-push-action@v4
        with:
          context: .
          file: deploy/Dockerfile
          target: production
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/ml-project:latest
            ${{ secrets.DOCKER_USERNAME }}/ml-project:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      - name: Build development image
        if: github.ref == 'refs/heads/develop'
        uses: docker/build-push-action@v4
        with:
          context: .
          file: deploy/Dockerfile
          target: development
          push: false
          tags: ml-project:dev-${{ github.sha }}

  # Deploy
  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - uses: actions/checkout@v4
      
      - name: Deploy to production
        run: |
          echo "üöÄ Deploying ML Project to production..."
          echo "üê≥ Docker image: ${{ secrets.DOCKER_USERNAME }}/ml-project:${{ github.sha }}"
          echo "üìä AutoML components included"
          echo "‚úÖ Deployment completed successfully"
          
      - name: Health check
        run: |
          echo "üè• Running health checks..."
          # Add actual health check commands here
          echo "‚úÖ All services healthy"
          
      - name: Notify deployment
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "‚úÖ Deployment successful! AutoML features are now live."
          else
            echo "‚ùå Deployment failed! Check logs for details."
          fi
