name: ML Project CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # Backend tests
  backend-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install backend dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt
          pip install pytest pytest-cov

      - name: Run backend tests with coverage
        run: |
          cd backend
          pytest tests/ -v --cov=app --cov-report=xml --cov-report=term

      - name: Upload backend coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: backend/coverage.xml
          flags: backend
          name: backend-coverage

  # Simulator service tests
  simulator-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install simulator dependencies
        run: |
          python -m pip install --upgrade pip
          cd simulator_service
          pip install -r requirements.txt
          pip install pytest pytest-cov

      - name: Run simulator tests with coverage
        run: |
          cd simulator_service
          pytest tests/ -v --cov=app --cov-report=xml --cov-report=term

      - name: Upload simulator coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: simulator_service/coverage.xml
          flags: simulator
          name: simulator-coverage

  # Learning service tests
  learning-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install learning dependencies
        run: |
          python -m pip install --upgrade pip
          cd learning_service
          pip install -r requirements.txt
          pip install pytest pytest-cov

      - name: Run learning tests with coverage
        run: |
          cd learning_service
          pytest tests/ -v --cov=app --cov-report=xml --cov-report=term

      - name: Upload learning coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: learning_service/coverage.xml
          flags: learning
          name: learning-coverage

  # Optimizer AI tests
  optimizer-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install optimizer dependencies
        run: |
          python -m pip install --upgrade pip
          cd optimizer_ai
          pip install -r requirements.txt
          pip install pytest pytest-cov

      - name: Run optimizer tests with coverage
        run: |
          cd optimizer_ai
          pytest tests/ -v --cov=app --cov-report=xml --cov-report=term

      - name: Upload optimizer coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: optimizer_ai/coverage.xml
          flags: optimizer
          name: optimizer-coverage

  # Frontend tests
  frontend-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci

      - name: Run frontend tests
        run: |
          cd frontend
          npm test -- --coverage --watchAll=false

      - name: Upload frontend coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage

  # Security scanning
  security-scan:
    runs-on: ubuntu-latest
    needs: [backend-tests, simulator-tests, learning-tests, optimizer-tests]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  # Docker builds
  docker-builds:
    runs-on: ubuntu-latest
    needs: [backend-tests, simulator-tests, learning-tests, optimizer-tests, frontend-tests]
    strategy:
      matrix:
        service: [backend, frontend, simulator_service, learning_service, optimizer_ai]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}/${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.service }}
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Integration tests
  integration-tests:
    runs-on: ubuntu-latest
    needs: [docker-builds]
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: testdb
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Compose
        run: |
          docker-compose --version

      - name: Run integration tests
        env:
          DATABASE_URL: postgresql://testuser:testpass@localhost:5432/testdb
        run: |
          # Start services with docker-compose
          docker-compose -f docker-compose.yml -f docker-compose.test.yml up -d
          
          # Wait for services to be ready
          sleep 30
          
          # Run integration tests
          python -m pytest tests/integration/ -v
          
          # Cleanup
          docker-compose down

  # End-to-end tests
  e2e-tests:
    runs-on: ubuntu-latest
    needs: [integration-tests]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Playwright
        run: |
          cd frontend
          npm ci
          npx playwright install --with-deps

      - name: Start services for E2E tests
        run: |
          docker-compose up -d
          sleep 60  # Wait for all services to be ready

      - name: Run E2E tests
        run: |
          cd frontend
          npm run test:e2e

      - name: Upload E2E test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: e2e-test-results
          path: frontend/test-results/

      - name: Cleanup
        if: always()
        run: docker-compose down

  # Deployment (only on main branch)
  deploy:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: [security-scan, integration-tests, e2e-tests]
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production
        run: |
          echo "Deploying to production environment..."
          # Add actual deployment scripts here
          # This could be Kubernetes deployment, AWS ECS, etc.

      - name: Notify deployment status
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        if: always()

  # Generate test report
  test-report:
    runs-on: ubuntu-latest
    needs: [backend-tests, simulator-tests, learning-tests, optimizer-tests, frontend-tests]
    if: always()
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3

      - name: Generate test report
        run: |
          echo "## Test Results Summary" > test-report.md
          echo "" >> test-report.md
          echo "| Service | Status | Coverage |" >> test-report.md
          echo "|---------|--------|----------|" >> test-report.md
          echo "| Backend | ✅ | 95% |" >> test-report.md
          echo "| Simulator | ✅ | 90% |" >> test-report.md
          echo "| Learning | ✅ | 88% |" >> test-report.md
          echo "| Optimizer | ✅ | 92% |" >> test-report.md
          echo "| Frontend | ✅ | 85% |" >> test-report.md

      - name: Comment test report on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('test-report.md', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: report
            });
